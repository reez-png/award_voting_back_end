# cloudbuild.yaml
steps:
# Step 1: Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Docker Image' # Human-readable ID for this step
  args: [
    'build',
    '-t', 'us-central1-docker.pkg.dev/awards-voting-platform-prod/awards-voting-repo/awards-voting-backend:latest',
    '.'
  ]

# Step 2: Push the Docker image to Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push to Artifact Registry'
  args: [
    'push',
    'us-central1-docker.pkg.dev/awards-voting-platform-prod/awards-voting-repo/awards-voting-backend:latest'
  ]

# Step 3: Deploy the image to Cloud Run
# Ensure the Cloud Build service account has the 'Cloud Run Developer' role
# and 'Service Account User' role (for the Cloud Run runtime service account).
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'Deploy to Cloud Run'
  entrypoint: gcloud
  args: [
    'run',
    'deploy',
    'awards-voting-backend-service', # Your Cloud Run service name
    '--image', 'us-central1-docker.pkg.dev/awards-voting-platform-prod/awards-voting-repo/awards-voting-backend:latest',
    '--platform', 'managed',
    '--region', 'us-central1', # Must match your Cloud Run service region
    '--allow-unauthenticated', # Keep this if your API is public
    '--port', '5000', # The port your Flask app (Waitress) listens on
    # Add any environment variables needed for your Cloud Run service here
    # These override variables set in the Cloud Run console for this deployment
    # It's usually better to manage secrets directly in Cloud Run console,
    # but for non-secrets, or if you prefer to manage them here:
    # '--set-env-vars', 'SECRET_KEY=your_prod_secret_key,PAYSTACK_TEST_SECRET_KEY=sk_test_...'
  ]

# Specify the images that will be built and pushed by this build process
images:
- 'us-central1-docker.pkg.dev/awards-voting-platform-prod/awards-voting-repo/awards-voting-backend:latest'

# Optional: Timeout for the entire build process (e.g., 20 minutes)
timeout: '1200s' # 20 minutes
